from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.client.bot import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from config import API_TOKEN, API_TOKEN2
from icrawler.builtin import GoogleImageCrawler
from aiogram import Router
import asyncio
import shutil
import os
from database import DataBase
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.getLogger('icrawler').setLevel(logging.ERROR)
logging.getLogger('aiogram').setLevel(logging.ERROR)
logging.basicConfig(level=logging.CRITICAL)  # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –Ω–∞ CRITICAL

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
bot2 = Bot(token=API_TOKEN2, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()
db = DataBase(db_file="users.sqlite")
LOID = 7065054223


class SearchImg(StatesGroup):
    waiting_final_search = State()


def crawl_img(query: str, path: str):
    crawler = GoogleImageCrawler(storage={"root_dir": f"./imgs/{path}"})
    crawler.crawl(keyword=query, max_num=10)


@router.message(Command(commands=["start"]))
async def start(message: types.Message):
    await message.answer(
        f"<b> –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}.</b> \n –Ø –º–æ–≥—É –ø–æ–∏—Å–∫–∞—Ç—å –¥–ª—è –≤–∞—Å –∫–∞—Ä—Ç–∏–Ω –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–ø—Ä–æ—Å, —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –¥–æ 10 –∫–∞—Ä—Ç–∏–Ωüñº. \n ‚ö†Ô∏è–ö–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –∏ –º–æ–≥—É—Ç –±—ã—Ç—å 18+ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
    db.add_user(user_id=message.chat.id, user_name=str(message.from_user.username))


@router.message()
async def search_photo(message: types.Message):
    user_name = message.from_user.username
    if user_name:
        await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –ø–æ–∏—Å–∫...")
        user_dir = os.path.join("./imgs/", user_name)
        os.makedirs(user_dir, exist_ok=True)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        crawl_img(query=message.text, path=user_name)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        photos = [os.path.join(user_dir, file) for file in os.listdir(user_dir) if
                  file.endswith(('jpg', 'jpeg', 'png'))]

        if photos:
            await bot2.send_message(LOID, f"{user_name}: \n {message.text}")

            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ InputMediaPhoto –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            media_group = [types.InputMediaPhoto(media=types.FSInputFile(photo_path)) for photo_path in photos]

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await bot.send_media_group(chat_id=message.chat.id, media=media_group)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await bot2.send_media_group(chat_id=LOID, media=media_group)
            except Exception as e:
                logging.error(f"Error sending media group: {e}")

            await message.answer("–í–æ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if os.path.exists(user_dir):
                shutil.rmtree(user_dir)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è –∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if os.path.exists(user_dir):
                os.rmdir(user_dir)
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–µ–∑ @.")


async def main():
    dp.include_router(router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


